services:
  devfiles-postgres:
    image: postgres:16-alpine
    container_name: devfiles-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - devfiles-postgres-data:/var/lib/postgresql/data
    networks:
      devfiles-network:
        aliases:
          - devfiles-api
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  devfiles-rabbitmq1:
    build:
      context: dev-files-api/rabbitmq
      dockerfile: Dockerfile
    hostname: devfiles-rabbitmq1
    container_name: devfiles-rabbitmq1
    environment:
      RABBITMQ_NODENAME: devfiles-rabbitmq@devfiles-rabbitmq1
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      NOTIFICATION_SERVICE_USER: ${NOTIFICATION_SERVICE_USER}
      NOTIFICATION_SERVICE_PASS: ${NOTIFICATION_SERVICE_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./dev-files-api/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      rabbitmq-cluster:
        aliases:
          - devfiles-rabbitmq1
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl node_health_check"]
      interval: 10s
      timeout: 5s
      retries: 5

  devfiles-rabbitmq2:
    build:
      context: dev-files-api/rabbitmq
      dockerfile: Dockerfile
    hostname: devfiles-rabbitmq2
    container_name: devfiles-rabbitmq2
    environment:
      RABBITMQ_NODENAME: devfiles-rabbitmq@devfiles-rabbitmq2
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - ./dev-files-api/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      rabbitmq-cluster:
        aliases:
          - devfiles-rabbitmq2

  devfiles-redis:
    image: redis:6-alpine
    container_name: devfiles-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      devfiles-network:
        aliases:
          - devfiles-redis
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  devfiles-api:
    build:
      context: dev-files-api
      dockerfile: Dockerfile
    env_file:
      - .env
    container_name: devfiles-api
    restart: unless-stopped
    volumes:
      - ~/.m2:/root/.m2
    ports:
      - "${DEV_FILES_SERVICE_PORT:-8080}:8080"
    networks:
      devfiles-network:
        aliases:
          - devfiles-api
      rabbitmq-cluster:
        aliases:
          - devfiles-api
    depends_on:
      devfiles-postgres:
        condition: service_healthy
      devfiles-rabbitmq1:
        condition: service_healthy
      devfiles-redis:
        condition: service_healthy

  notification-service:
    build:
      context: dev-files-notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ~/.m2:/root/.m2
    networks:
      devfiles-network:
        aliases:
          - notification-service
      rabbitmq-cluster:
        aliases:
          - notification-service

  chroma_db:
    image: chromadb/chroma:0.6.4.dev226
    container_name: chroma_db
    networks:
      devfiles-network:
        aliases:
          - devfiles-chroma_db
    volumes:
      - chroma_db_data:/chroma/chroma
    environment:
      IS_PERSISTENT: "TRUE"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/bin/bash", "-c", "cat < /dev/null > /dev/tcp/localhost/8000"]
      interval: 30s
      timeout: 10s
      retries: 3

  ollama_llm:
    image: ollama/ollama:latest
    container_name: ollama_llm
    networks:
      devfiles-network:
        aliases:
          - devfiles-ollama_llm
    volumes:
      - ollama_llm_data:/root/.ollama
    entrypoint: ["/bin/sh", "-c", "ollama serve & sleep 5 && ollama run gemma3:1b && wait"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/bin/bash", "-c", "cat < /dev/null > /dev/tcp/localhost/11434"]
      interval: 30s
      timeout: 10s
      retries: 3

  ollama_embedding:
    image: ollama/ollama:latest
    container_name: ollama_embedding
    networks:
      devfiles-network:
        aliases:
          - devfiles-ollama_embedding
    volumes:
      - ollama_embedding_data:/root/.ollama
    environment:
      OLLAMA_HOST: "0.0.0.0:11435"
    entrypoint: ["/bin/sh", "-c", "ollama serve & sleep 5 && ollama pull nomic-embed-text && wait"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/bin/bash", "-c", "cat < /dev/null > /dev/tcp/localhost/11435"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-service:
    build:
      context: dev-files-ai-service
      dockerfile: Dockerfile-dev
    container_name: ai-service
    ports:
      - "${AI_SERVICE_PORT:-5000}:5000"
    env_file:
      - .env
    networks:
      devfiles-network:
        aliases:
          - devfiles-ai-service
    depends_on:
      chroma_db:
        condition: service_healthy
      ollama_llm:
        condition: service_healthy
      ollama_embedding:
        condition: service_healthy

networks:
  devfiles-network:
    name: devfiles-network
    driver: bridge
  rabbitmq-cluster:
    name: rabbitmq-cluster
    driver: bridge

volumes:
  devfiles-postgres-data:
  chroma_db_data:
  ollama_llm_data:
  ollama_embedding_data: